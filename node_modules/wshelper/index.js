var io = require('socket.io');
var http = require('httphelper');

////// WEB SOCKET SERVER ZONE ////// WEB SOCKET SERVER ZONE //////
////// WEB SOCKET SERVER ZONE ////// WEB SOCKET SERVER ZONE //////
////// WEB SOCKET SERVER ZONE ////// WEB SOCKET SERVER ZONE //////

var oWSServer;
var aServices = null;
var oSocketRegistry = null;
var nServerTimestamp;


/**
 * Envoi un message à tous les clients
 * @param sMessage code message
 * @param xData contenu des données
 */
function wsSendToAll(sMessage, xData) {
	oWSServer.sockets.emit(sMessage, xData);
}

/**
 * Envoi un message à certains clients
 * @param aSockets array of Sockets : liste des sockets à servir
 * @param sMessage code message
 * @param xData contenu des données
 */
function wsSendToSome(aSockets, sMessage, xData) {
	if (!aSockets) {
		return;
	}
	var nLen = aSockets.length;
	for (var i = 0; i < nLen; ++i) {
		if (aSockets[i]) {
			aSockets[i].emit(sMessage, xData);
		}
	}
}


/**
 * Vérifie que la socket à bien été crée lors de cette session
 * La session est un timestamp généré une fois lors de l'activation du serveur
 * Les socket nouvellement créées dans cette session sont taggées avec ce timestamp
 * On peut vérifier si une socket appartient bien à cette session, et ne provient pas d'une
 * reconnection fantôme.
 * @param oSocket socket à vérifier
 * @return boolean true = la socket a bien été créée pendant cette session et peut être fermée sans problème.
 */
function wsCheckSocketSession(oSocket) {
	return wsGetData(oSocket, '__serverTimestamp') == nServerTimestamp;
}


/**
 * Démarrage du server web socket
 * @param oServer instance de serveur HTTP
 */
function wsInit(oServer) {
	oSocketRegistry = {};
	aServices = [];
	nServerTimestamp = Date.now();
	oWSServer = io.listen(oServer, {log: false});
	oWSServer.use(function(oSocket, next) {
		if ('__data' in oSocket) {
			throw new Error('websocket storage namespace conflict');
		}
		oSocket.__data = {
			__serverTimestamp: nServerTimestamp
		};
		next();
	});
}

/**
 * Ajoute un service.
 * un service est une fonction qui sera appelée chaque fois qu'une socket est crée
 * Chaque service à la charge de déclarer pour ces nouvelles sockets, des gestionnaire d'évènement
 * utiles pour le service.
 * la fonction de service accepte un paramètre de type socket
 * wsAddService(function(oSocket) { oSocket.on('... 
 * @param pService function service
 */
function wsAddService(pService) {
	aServices.push(pService);
}

/**
 * Définition et démarrage du service
 * Appelle toutes les fonction définies jusqu'alors en teant que service.
 */
function wsStartService() {
	oWSServer.sockets.on('connection', function(oSocket) {
		aServices.forEach(function (s) {
			s(oSocket);
		});
	});
}

/**
 * Virer tous les clients connectés
 */
function wsWipe() {
	oWSServer.sockets.clients().forEach(function(s) {
		s.disconnect();
	});
	oSocketRegistry = {};
}

/**
 * Récupérer une donnée associée à la socket
 * @param Socket oSocket
 * @param string sVariable nom de la variable
 * @return any valeur de la variable
 */
function wsGetData(oSocket, sVariable) {
	return oSocket.__data[sVariable];
}

/**
 * Associer une variable à la socket
 * @param Socket oSocket
 * @param string sVariable nom de la variable
 * @param any xValue valeur de la variable
 */
function wsSetData(oSocket, sVariable, xValue) {
	oSocket.__data[sVariable] = xValue;
}

/**
 * Récupérer l'adresse d'une socket
 * @param Socket oSocket
 * @return string adresse ip
 */
function wsGetAddress(oSocket) {
	// Retro compat avec socket.io 0.9 
	var oAddr = oSocket.handshake;
	if (typeof oAddr.address === 'object') {
		return oAddr.address.address;
	} else {
		return oAddr.address;
	}
}

/**
 * Définir l'identifiant d'une socket
 * Un identifiant est un bon moyen d'associer l'instance d'un client à un ensemble de données
 * @param Socket oSocket
 * @param int id identifiant
 */
function wsSetSocketId(oSocket, id) {
	wsSetData(oSocket, '__client_id', id);
	http.writeLog('[Socket] registering #' + id);
	oSocketRegistry[id] = oSocket;
	oSocket.on('disconnect', function() {
		if (wsCheckSocketSession(oSocket)) {
			http.writeLog('[Socket] closing #' + id);
			delete oSocketRegistry[id];
		} else {
			http.writeLog('[Socket] ghost socket #' + id);
		}
	});
}

/**
 * Récupérer une socket grace à son identifiant
 * @param int id identifiant
 * @return Socket oSocket
 */
function wsGetSocket(id) {
	if (id in oSocketRegistry) {
		return oSocketRegistry[id];
	} else {
		return null;
	}
}

/**
 * Récupérer l'identifiant d'une socket, défini précedemment avec setSocketId 
 * @param Socket oSocket
 * @return int id identifiant
 */
function wsGetSocketId(oSocket) {
	return wsGetData(oSocket, '__client_id');
}

module.exports = {
	init: wsInit,
	addService: wsAddService,
	start: wsStartService,
	send: wsSendToSome,
	sendToAll: wsSendToAll,
	wipe: wsWipe,
	getData: wsGetData,
	setData: wsSetData,
	getAddress: wsGetAddress,
	checkSession: wsCheckSocketSession,
	setSocketId: wsSetSocketId,
	getSocketId: wsGetSocketId,
	getSocket: wsGetSocket,
};
